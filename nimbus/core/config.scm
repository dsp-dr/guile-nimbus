;;; config.scm - Configuration management
;;; Copyright (C) 2025 Nimbus Contributors

(define-module (nimbus core config)
  #:use-module (ice-9 format)
  #:use-module (ice-9 textual-ports)
  #:use-module (ice-9 hash-table)
  #:use-module (srfi srfi-1)
  #:export (load-config
            save-config
            get-config-value
            set-config-value
            config-project-name
            config-state-backend
            config-state-file
            config-provider
            config-workspace))

(define *current-config* #f)

(define (load-config . args)
  "Load configuration from nimbus.config or specified file"
  (let ((config-file (if (null? args)
                         "nimbus.config"
                         (car args))))
    (if (file-exists? config-file)
        (catch #t
          (lambda ()
            (let ((config-data (call-with-input-file config-file
                                (lambda (port)
                                  (let loop ((expr (read port))
                                            (config (make-hash-table)))
                                    (if (eof-object? expr)
                                        config
                                        (begin
                                          (case (car expr)
                                            ((project-name)
                                             (hash-set! config 'project-name (cadr expr)))
                                            ((state-backend)
                                             (hash-set! config 'state-backend (cadr expr)))
                                            ((state-file)
                                             (hash-set! config 'state-file (cadr expr)))
                                            ((provider)
                                             (hash-set! config 'provider (cdr expr)))
                                            ((workspace)
                                             (hash-set! config 'workspace (cadr expr))))
                                          (loop (read port) config))))))))
              (set! *current-config* config-data)
              config-data))
          (lambda (key . args)
            (format #t "Error loading config: ~a ~a~%" key args)
            (make-default-config)))
        (make-default-config))))

(define (make-default-config)
  "Create default configuration"
  (let ((config (make-hash-table)))
    (hash-set! config 'project-name "nimbus-project")
    (hash-set! config 'state-backend "local")
    (hash-set! config 'state-file ".nimbus/state.scm")
    (hash-set! config 'workspace "default")
    (set! *current-config* config)
    config))

(define (save-config config . args)
  "Save configuration to file"
  (let ((config-file (if (null? args)
                         "nimbus.config"
                         (car args))))
    (call-with-output-file config-file
      (lambda (port)
        (display ";; Nimbus configuration file\n" port)
        (display ";; Generated by Nimbus\n\n" port)
        
        (when (hash-ref config 'project-name)
          (format port "(project-name ~s)~%" (hash-ref config 'project-name)))
        
        (when (hash-ref config 'state-backend)
          (format port "(state-backend ~s)~%" (hash-ref config 'state-backend)))
        
        (when (hash-ref config 'state-file)
          (format port "(state-file ~s)~%" (hash-ref config 'state-file)))
        
        (when (hash-ref config 'workspace)
          (format port "(workspace ~s)~%" (hash-ref config 'workspace)))
        
        (when (hash-ref config 'provider)
          (format port "(provider~{ ~s~})~%" (hash-ref config 'provider)))))))

(define (get-config-value key)
  "Get a configuration value"
  (unless *current-config*
    (load-config))
  (hash-ref *current-config* key))

(define (set-config-value key value)
  "Set a configuration value"
  (unless *current-config*
    (load-config))
  (hash-set! *current-config* key value))

;; Convenience accessors
(define (config-project-name)
  (get-config-value 'project-name))

(define (config-state-backend)
  (get-config-value 'state-backend))

(define (config-state-file)
  (get-config-value 'state-file))

(define (config-provider)
  (get-config-value 'provider))

(define (config-workspace)
  (or (get-config-value 'workspace) "default"))