%%%% Starting test secrets-management
Group begin: secrets-management
Group begin: encryption-key-creation
Test begin:
  test-name: "key-id"
  source-file: "tests/test-secrets.scm"
  source-line: 20
  source-form: (test-equal "key-id" "key-1" (encryption-key-id key))
Test end:
  result-kind: pass
  actual-value: "key-1"
  expected-value: "key-1"
Test begin:
  test-name: "key-alias"
  source-file: "tests/test-secrets.scm"
  source-line: 24
  source-form: (test-equal "key-alias" "master-key" (encryption-key-alias key))
Test end:
  result-kind: pass
  actual-value: "master-key"
  expected-value: "master-key"
Test begin:
  test-name: "key-material"
  source-file: "tests/test-secrets.scm"
  source-line: 28
  source-form: (test-equal "key-material" "dGVzdC1rZXktbWF0ZXJpYWwtZm9yLXRlc3Rpbmc=" (encryption-key-material key))
Test end:
  result-kind: pass
  actual-value: "dGVzdC1rZXktbWF0ZXJpYWwtZm9yLXRlc3Rpbmc="
  expected-value: "dGVzdC1rZXktbWF0ZXJpYWwtZm9yLXRlc3Rpbmc="
Test begin:
  test-name: "key-algorithm"
  source-file: "tests/test-secrets.scm"
  source-line: 32
  source-form: (test-equal "key-algorithm" "AES-256-CBC" (encryption-key-algorithm key))
Test end:
  result-kind: pass
  actual-value: "AES-256-CBC"
  expected-value: "AES-256-CBC"
Test begin:
  test-name: "key-is-active"
  source-file: "tests/test-secrets.scm"
  source-line: 36
  source-form: (test-assert "key-is-active" (encryption-key-active? key))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "key-not-rotated"
  source-file: "tests/test-secrets.scm"
  source-line: 39
  source-form: (test-assert "key-not-rotated" (not (encryption-key-rotated-at key)))
Test end:
  result-kind: pass
  actual-value: #t
Group end: encryption-key-creation
Group begin: secret-creation
Test begin:
  test-name: "secret-id"
  source-file: "tests/test-secrets.scm"
  source-line: 51
  source-form: (test-equal "secret-id" "secret-1" (secret-id secret))
Test end:
  result-kind: pass
  actual-value: "secret-1"
  expected-value: "secret-1"
Test begin:
  test-name: "secret-name"
  source-file: "tests/test-secrets.scm"
  source-line: 55
  source-form: (test-equal "secret-name" "database-password" (secret-name secret))
Test end:
  result-kind: pass
  actual-value: "database-password"
  expected-value: "database-password"
Test begin:
  test-name: "secret-namespace"
  source-file: "tests/test-secrets.scm"
  source-line: 59
  source-form: (test-equal "secret-namespace" "production" (secret-namespace secret))
Test end:
  result-kind: pass
  actual-value: "production"
  expected-value: "production"
Test begin:
  test-name: "secret-encrypted-value"
  source-file: "tests/test-secrets.scm"
  source-line: 63
  source-form: (test-equal "secret-encrypted-value" "encrypted-data-here" (secret-encrypted-value secret))
Test end:
  result-kind: pass
  actual-value: "encrypted-data-here"
  expected-value: "encrypted-data-here"
Test begin:
  test-name: "secret-encryption-key-id"
  source-file: "tests/test-secrets.scm"
  source-line: 67
  source-form: (test-equal "secret-encryption-key-id" "key-1" (secret-encryption-key-id secret))
Test end:
  result-kind: pass
  actual-value: "key-1"
  expected-value: "key-1"
Test begin:
  test-name: "secret-version"
  source-file: "tests/test-secrets.scm"
  source-line: 71
  source-form: (test-equal "secret-version" 1 (secret-version secret))
Test end:
  result-kind: pass
  actual-value: 1
  expected-value: 1
Test begin:
  test-name: "secret-metadata-is-hash-table"
  source-file: "tests/test-secrets.scm"
  source-line: 75
  source-form: (test-assert "secret-metadata-is-hash-table" (hash-table? (secret-metadata secret)))
Test end:
  result-kind: pass
  actual-value: #t
Group end: secret-creation
Group begin: secret-access
Test begin:
  test-name: "access-id"
  source-file: "tests/test-secrets.scm"
  source-line: 86
  source-form: (test-equal "access-id" "access-1" (secret-access-id access))
Test end:
  result-kind: pass
  actual-value: "access-1"
  expected-value: "access-1"
Test begin:
  test-name: "access-secret-id"
  source-file: "tests/test-secrets.scm"
  source-line: 90
  source-form: (test-equal "access-secret-id" "secret-1" (secret-access-secret-id access))
Test end:
  result-kind: pass
  actual-value: "secret-1"
  expected-value: "secret-1"
Test begin:
  test-name: "access-accessor-id"
  source-file: "tests/test-secrets.scm"
  source-line: 94
  source-form: (test-equal "access-accessor-id" "user-123" (secret-access-accessor-id access))
Test end:
  result-kind: pass
  actual-value: "user-123"
  expected-value: "user-123"
Test begin:
  test-name: "access-type"
  source-file: "tests/test-secrets.scm"
  source-line: 98
  source-form: (test-equal "access-type" "read" (secret-access-type access))
Test end:
  result-kind: pass
  actual-value: "read"
  expected-value: "read"
Test begin:
  test-name: "access-timestamp-exists"
  source-file: "tests/test-secrets.scm"
  source-line: 102
  source-form: (test-assert "access-timestamp-exists" (secret-access-accessed-at access))
Test end:
  result-kind: pass
  actual-value: #<date nanosecond: 142042000 second: 55 minute: 11 hour: 20 day: 19 month: 8 year: 2025 zone-offset: -14400>
Group end: secret-access
Group begin: key-rotation
Test begin:
  test-name: "original-key-inactive"
  source-file: "tests/test-secrets.scm"
  source-line: 114
  source-form: (test-assert "original-key-inactive" (not (encryption-key-active? original-key)))
Test end:
  result-kind: pass
  actual-value: #t
Test begin:
  test-name: "original-key-has-rotation-date"
  source-file: "tests/test-secrets.scm"
  source-line: 117
  source-form: (test-assert "original-key-has-rotation-date" (encryption-key-rotated-at original-key))
Test end:
  result-kind: pass
  actual-value: #<date nanosecond: 142358000 second: 55 minute: 11 hour: 20 day: 19 month: 8 year: 2025 zone-offset: -14400>
Test begin:
  test-name: "rotated-key-id-updated"
  source-file: "tests/test-secrets.scm"
  source-line: 120
  source-form: (test-equal "rotated-key-id-updated" "key-2-rotated" (encryption-key-id rotated-key))
Test end:
  result-kind: pass
  actual-value: "key-2-rotated"
  expected-value: "key-2-rotated"
Test begin:
  test-name: "rotated-key-same-alias"
  source-file: "tests/test-secrets.scm"
  source-line: 124
  source-form: (test-equal "rotated-key-same-alias" "rotate-test" (encryption-key-alias rotated-key))
Test end:
  result-kind: pass
  actual-value: "rotate-test"
  expected-value: "rotate-test"
Test begin:
  test-name: "rotated-key-new-material"
  source-file: "tests/test-secrets.scm"
  source-line: 128
  source-form: (test-equal "rotated-key-new-material" new-material (encryption-key-material rotated-key))
Test end:
  result-kind: pass
  actual-value: "bmV3LWtleS1tYXRlcmlhbC1hZnRlci1yb3RhdGlvbg=="
  expected-value: "bmV3LWtleS1tYXRlcmlhbC1hZnRlci1yb3RhdGlvbg=="
Test begin:
  test-name: "rotated-key-is-active"
  source-file: "tests/test-secrets.scm"
  source-line: 132
  source-form: (test-assert "rotated-key-is-active" (encryption-key-active? rotated-key))
Test end:
  result-kind: pass
  actual-value: #t
Group end: key-rotation
Group begin: secret-metadata
Test begin:
  test-name: "metadata-created-by"
  source-file: "tests/test-secrets.scm"
  source-line: 149
  source-form: (test-equal "metadata-created-by" "admin" (hash-ref (secret-metadata secret) "created-by"))
Test end:
  result-kind: pass
  actual-value: "admin"
  expected-value: "admin"
Test begin:
  test-name: "metadata-environment"
  source-file: "tests/test-secrets.scm"
  source-line: 153
  source-form: (test-equal "metadata-environment" "dev" (hash-ref (secret-metadata secret) "environment"))
Test end:
  result-kind: pass
  actual-value: "dev"
  expected-value: "dev"
Test begin:
  test-name: "metadata-rotation-interval"
  source-file: "tests/test-secrets.scm"
  source-line: 157
  source-form: (test-equal "metadata-rotation-interval" 90 (hash-ref (secret-metadata secret) "rotation-interval"))
Test end:
  result-kind: pass
  actual-value: 90
  expected-value: 90
Test begin:
  test-name: "secret-version-updated"
  source-file: "tests/test-secrets.scm"
  source-line: 164
  source-form: (test-equal "secret-version-updated" 2 (secret-version secret))
Test end:
  result-kind: pass
  actual-value: 2
  expected-value: 2
Group end: secret-metadata
Group begin: namespace-management
Test begin:
  test-name: "two-secrets-in-prod-namespace"
  source-file: "tests/test-secrets.scm"
  source-line: 188
  source-form: (test-equal "two-secrets-in-prod-namespace" 2 (length prod-secrets))
Test end:
  result-kind: pass
  actual-value: 2
  expected-value: 2
Test begin:
  test-name: "prod-secrets-have-correct-namespace"
  source-file: "tests/test-secrets.scm"
  source-line: 192
  source-form: (test-assert "prod-secrets-have-correct-namespace" (every (lambda (s) (string=? (secret-namespace s) "prod")) prod-secrets))
Test end:
  result-kind: pass
  actual-value: #t
Group end: namespace-management
Group end: secrets-management
# of expected passes      30
